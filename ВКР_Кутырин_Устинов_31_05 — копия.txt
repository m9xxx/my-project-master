     ГЛАВА 3. РЕАЛИЗАЦИЯ СИСТЕМЫ

     Реализация информационной системы агрегации образовательных курсов представляет собой комплексный процесс, охватывающий множество аспектов разработки современного веб-приложения. В данной главе подробно рассматриваются технические решения, использованные при создании системы, особености реализации различных компонентов и их взаимодействие между собой.

     Архитектура системы построена на принципах модульности и масштабируемости, что позволяет легко расширять функциональность и поддерживать растущую базу пользователей. Каждый компонент системы разработан с учетом современных практик программирования и оптимизирован для максимальной производительности. В основе архитектурного решения лежит концепция разделения ответствености, где каждый модуль выполняет строго определенные функции и взаимодействует с другими компонентами через четко определенные интерфейсы.

     Особое внимание при разработке было уделено пользовательскому опыту. Интерфейс системы спроектирован таким образом, чтобы обеспечить интуитивно понятную навигацию и быстрый доступ к основным функциям. Использование современных технологий фронтенд-разработки позволило создать отзывчивый и динамичный интерфейс, который одинаково эффективно работает как на десктопных, так и на мобильных устройствах.

     3.1 ИСПОЛЬЗУЕМЫЕ ТЕХНОЛОГИИ
     В процесе разработки агрегатора образовательных курсов ключевым этапом стал выбор технологического стека. После тщательного анализа существующих решений предпочтение было отдано комбинации Laravel/Vue в сочетании с локальной средой разработки XAMPP. Данный выбор обусловлен необходимостью создания надежного и масштабируемого приложения с удобным процесом разработки и отладки.

     XAMPP представляет собой интегрированый пакет программного обеспечения, который включает в себя все необходимые компоненты для локальной разработки. В его состав входит веб-сервер Apache версии 2.4.56, обеспечивающий обработку HTTP-запросов и маршрутизацию. Серверная часть функционирует на PHP версии 8.0.30, что позволяет использовать современные возможности языка. Система управления базами данных MySQL версии 8.0.31 отвечает за хранение и управление данными приложения. Для удобного администрирования базы данных используется phpMyAdmin версии 5.2.1.
     
     [РЕКОМЕНДУЕТСЯ ВСТАВИТЬ СКРИНШОТ ПАНЕЛИ УПРАВЛЕНИЯ XAMPP С ЗАПУЩЕННЫМИ СЕРВИСАМИ]
     

     В качестве основного фреймворка для разработки серверной части приложения был выбран Laravel версии 9.x. Данный фреймворк предоставляет разработчикам элегантный синтаксис и современную архитектуру, построеную на принципах Model-View-Controller. Встроенная система миграций значительно упрощает процесс управления структурой базы данных, позволяя версионировать изменения и поддерживать согласованность между средами разработки. Фреймворк включает в себя мощную систему объектно-реляционного отображения Eloquent, которая существенно упрощает взаимодействие с базой данных через удобный программный интерфейс.

     [РЕКОМЕНДУЕТСЯ ВСТАВИТЬ СКРИНШОТ СТРУКТУРЫ ПРОЕКТА В IDE С ОСНОВНЫМИ ДИРЕКТОРИЯМИ LARAVEL]

     Vue.js 3 предлагает революционный подход к разработке через Composition API, который кординально меняет способ организации логики компонентов. В отличии от традиционного Options API, новый подход позволяет группировать связанный код вместе, что существенно улутшает читаемость и поддерживаемость кодовой базы. Рассмотрим пример использования Composition API в компоненте поиска курсов:

     import { ref, computed, onMounted } from 'vue';
import { useAuthStore } from '@/store/auth';

export default {
  name: 'SearchPage',
  setup() {
    // 1. Реактивные состояния (ref) - удобное создание реактивных переменных
    const searchQuery = ref('');
    const isLoading = ref(false);
    
    // 2. Композиция состояний - группировка связанной логики
    const filters = ref({
      platforms: [],
      price: { min: null, max: null },
      rating: '0'
    });

    // 3. Интеграция с Pinia store - простое использование внешних хранилищ
    const authStore = useAuthStore();
    const user = computed(() => authStore.user);

    // 4. Асинхронные операции - четкое управление состоянием загрузки
    const fetchCourses = async () => {
      isLoading.value = true;
      try {
        // API запрос
      } finally {
        isLoading.value = false;
      }
    };

    // 5. Вычисляемые свойства - реактивные преобразования данных
    const filteredCourses = computed(() => 
      // Логика фильтрации
    );

    // 6. Хуки жизненного цикла - четкое место для побочных эффектов
    onMounted(fetchCourses);

    // 7. Возврат только нужных данных - явный контроль публичного API
    return {
      searchQuery,
      filters,
      filteredCourses
    };
  }
}

     Для управления состоянием приложения применяется современное решение Pinia, пришедшее на смену классическому Vuex. Pinia предоставляет более простой и интуитивный способ работы с глобальным состоянием, поддерживает TypeScript из коробки и обладает встроенными инструментами отладки. Архитектура хранилища данных разделена на модули, каждый из которых отвечает за определенную область функциональности:

     - Модуль аутентификации (auth store)
     - Модуль управления курсами (courses store)
     - Модуль пользовательских настроек (settings store)

     Для хранения данных используется MySQL версии 8.0.31, предоставляемая в составе XAMPP. Выбор данной СУБД обусловлен её высокой производительностью и надежностью при работе с большими объемами данных. Поддержка транзакций и внешних ключей обеспечивает целостность данных, а встроенные механизмы полнотекстового поиска позволяют эффективно искать информацию по содержимому курсов. Наличие механизмов репликации предоставляет возможность масштабирования системы в будущем.

     Взаимодействие с базой данных осуществляется через несколько уровней абстракции. Eloquent ORM предоставляет объектно-ориентированный интерфейс для работы с таблицами базы данных, представляя их в виде моделей. Query Builder используется для конструирования сложных SQL-запросов с помощью цепочек методов. Система миграций позволяет версионировать изменения структуры базы данных, а механизм сидеров обеспечивает наполнение базы тестовыми данными для разработки и тестирования.

     Маршрутизация в приложении реализована с помощью Vue Router, который обеспечивает навигацию между различными представлениями. Особое внимание уделено защите маршрутов и обработке пользовательских прав доступа. Реализована система middleware для проверки аутентификации пользователя перед доступом к защищенным маршрутам.

     Особое внимание уделено компонентам системы, отвечающим за парсинг образовательных платформ. Для выполнения HTTP-запросов используется библиотека Guzzle версии 7.0, которая предоставляет удобный интерфейс для работы с внешними API и веб-страницами. Анализ HTML-структуры выполняется с помощью Symfony DomCrawler, а для более глубокой работы с DOM-деревом применяется PHP Simple HTML DOM Parser. Управление длительными процессами парсинга осуществляется через компонент Symfony Process.

     Для стилизации компонентов используется препроцессор SCSS, что позволяет создавать масштабируемые и поддерживаемые стилевые решения. Применяется методология БЭМ (Блок-Элемент-Модификатор) для именования классов, что обеспечивает консистентность и предотвращает конфликты стилей. Создана система переменных для хранения основных цветов, размеров и других визуальных параметров:

     3.2 РЕАЛИЗАЦИЯ БЭКЭНД ЧАСТИ

     Серверная часть приложения реализована на базе фреймворка Laravel, что обеспечивает надежную основу для разработки масштабируемых веб-приложений. Бэкенд система построена с использованием архитектурного паттерна MVC (Model-View-Controller), который обеспечивает четкое разделение бизнес-логики, представления данных и управляющей логики.

     [РЕКОМЕНДУЕТСЯ ВСТАВИТЬ ДИАГРАММУ СТРУКТУРЫ БАЗЫ ДАННЫХ]

     Центральным элементом бэкенд архитектуры является система моделей, представляющих основные сущности приложения. Модель Course описывает структуру данных образовательного курса и включает такие атрибуты как название, описание, стоимость, продолжительность и рейтинг. Модель Platform представляет образовательные платформы, с которых агрегируются курсы. User модель реализует функционал управления пользовательскими данными, включая механизмы аутентификации и авторизации.

class Course {
    private $id;
    private $title;
    private $description;
    private $rating;
    private $url;
    private $source;
    private $additionalData;

	public function getId() { return $this->id; }
    public function getTitle() { return $this->title; }
    public function getDescription() { return $this->description; }
    public function getRating() { return $this->rating; }
    public function getUrl() { return $this->url; }
    public function getSource() { return $this->source; }



     Контроллеры, расположенные в директории app/Controllers/API, обеспечивают обработку HTTP-запросов и формирование ответов. CourseController управляет операциями с курсами, включая их поиск, фильтрацию и детальный просмотр. PlatformController отвечает за управление информацией об образовательных платформах. CategoryController обеспечивает работу с категориями курсов. UserController реализует функционал управления пользовательскими данными. FavoriteController отвечает за операции с избранными курсами, а AuthController обеспечивает процессы аутентификации и авторизации.

     3.3 РЕАЛИЗАЦИЯ ПАРСЕРОВ
     Для получения данных о курсах с различных образовательных платформ были разработаны специализированые парсеры. Каждый парсер учитывает особенности структуры и организации контента соответсвующей платформы. В основе архитектуры парсеров лежит абстрактный базовый класс BaseParser, который предоставляет общий функционал для работы с HTTP-запросами, обработки ошибок и логирования.

     Система парсинга образовательных курсов представляет собой комплекс специализированных модулей, каждый из которых оптимизирован для работы с конкретной образовательной платформой. Архитектура парсеров построена на принципах расширяемости, что позволяет легко добавлять поддержку новых источников данных.

     3.3.1 Парсер Stepik

     Парсер платформы Stepik реализован с использованием официального API Stepik, что обеспечивает стабильный и надежный доступ к данным о курсах. Модуль выполняет пагинированные запросы к API для получения актуальной информации о доступных курсах. Особое внимание уделено обработке ошибок и повторным попыткам при сбоях сети.

     Особое внимание уделено фильтрации неактуальных и тестовых курсов. Реализована система проверки качества контента, которая анализирует наполненность основных полей курса и количество обучающихся. Это позволяет исключить из выдачи "курсы-заглушки" и обеспечить пользователей только качественным образовательным контентом.

     3.3.2 Парсер SkillBox
     В реализации парсера Skillbox особого внимания заслуживает функция getCourseUrlsFromCategories. Данная функция выполняет навигацию по дереву категорий образовательной платформы, начиная с корневых разделов, и рекурсивно обходит все подкатегории. Для каждой категории извлекаются ссылки на курсы с использованием CSS-селекторов, учитывающих особенности вёрстки платформы.

     Интересным техническим решением является реализация обхода защиты от автоматизированных запросов. Разработан механизм ротации User-Agent заголовков и динамических пауз между запросами. Интервалы между запросами вычисляются по формуле, учитывающей текущее время суток и день недели, что делает поведение парсера более похожим на действия реального пользователя.

     Функция getCourseUrlsFromXmlSitemap дополняет основной механизм сбора данных, анализируя карту сайта в формате XML. Особенностью реализации является потоковая обработка XML-документа, что позволяет эффективно работать с картами сайта большого размера без загрузки всего документа в память. Функция также выполняет валидацию обнаруженных URL и отфильтровывает ссылки, не соответствующие шаблону страниц курсов.

     3.3.3 Парсер Geekbrains
     В реализации парсера Geekbrains особый интерес представляет функция extractPrice, которая анализирует различные модели монетизации курсов. Функция корректно обрабатывает как разовые платежи, так и подписочные модели, приводя их к унифицированному формату для сравнения стоимости обучения между платформами.

     Заслуживает внимания реализация механизма определения актуальности курсов. Разработан алгоритм, который анализирует несколько параметров: дату последнего обновления материалов, активность в обсуждениях, количество новых студентов за последний месяц. На основе этих данных принимается решение о включении курса в агрегатор или его пометке как архивного.

     Отдельного упоминания заслуживает система кэширования промежуточных результатов парсинга. Реализован механизм инкрементального обновления данных, который позволяет возобновлять процесс парсинга с места остановки в случае сбоев. Это особенно важно при работе с большим каталогом курсов, где полное повторение процесса парсинга может занять значительное время.

     3.4 РЕАЛИЗАЦИЯ ФРОНТЕНД ЧАСТИ

     Клиентская часть приложения разработана с использованием Vue.js 3 и Composition API, что обеспечивает создание интерактивного и отзывчивого пользовательского интерфейса. Архитектура фронтенда построена на компонентном подходе, где каждый элемент интерфейса представляет собой независимый компонент с собственной логикой и стилями.

     [РЕКОМЕНДУЕТСЯ ВСТАВИТЬ СКРИНШОТ ГЛАВНОЙ СТРАНИЦЫ ПРИЛОЖЕНИЯ]

Центральным элементом пользовательского взаимодействия является страница поиска курсов (SearchPage), реализованная с использованием передовых практик оптимизации производительности. Внедрен механизм дебаунсинга для предотвращения избыточных запросов к серверу при вводе поискового запроса. Система фильтрации курсов поддерживает множественные критерии:

[ИЗОБРАЖЕНИЕ: Интерфейс страницы поиска с фильтрами]

 Каждый курс представлен в виде карточки, содержащей ключевую информацию:

[ИЗОБРАЖЕНИЕ: Пример компонента CourseCard]

     Основные компоненты включают:
     
     CourseList - компонент для отображения списка курсов с возможностью фильтрации и сортировки. Реализована виртуализация списка для эффективной работы с большими наборами данных.
     
     CourseCard - представляет карточку курса с основной информацией и элементами управления. Оптимизирован для различных размеров экрана.
     
     FilterPanel - панель фильтров, позволяющая пользователям настраивать параметры поиска курсов. Реализована с поддержкой множественного выбора и сохранения состояния фильтров.
     
     SearchBar - компонент поиска с автодополнением и подсветкой результатов. Использует дебаунсинг для оптимизации запросов к серверу.

Система аутентификации построена на основе JWT-токенов с реализацией механизма автоматического обновления при истечении срока действия. Пользовательские данные безопасно хранятся в локальном хранилище браузера с использованием шифрования чувствительной информации. Процесс авторизации включает многоступенчатую валидацию:

[ИЗОБРАЖЕНИЕ: Форма авторизации с валидацией]

Профиль пользователя реализован как отдельный модуль с собственным состоянием и набором компонентов. Внедрена система управления персональными настройками, включая возможность изменения пароля, обновления контактной информации и настройки уведомлений. Особое внимание уделено обработке ошибок и предоставлению понятной обратной связи:

Для работы с внешними API создан специализированный сервисный слой, который инкапсулирует всю логику взаимодействия с бэкендом. Реализован механизм перехвата ошибок с автоматической обработкой типовых ситуаций, таких как истечение сессии или проблемы с сетевым подключением. Все запросы к серверу выполняются через единый интерфейс:

import axios from 'axios';

const API_URL = '/api';

export const courseService = {
    // Получить все курсы
    async getAllCourses() {
        return axios.get(`${API_URL}/courses`);
    },

    // Получить курс по ID
    async getCourse(id) {
        return axios.get(`${API_URL}/courses/${id}`);
    },

    // Поиск курсов
    async searchCourses(query) {
        return axios.get(`${API_URL}/courses/search`, { params: { q: query } });
    },

    // Получить курсы по категории
    getCoursesByCategory(categoryId) {
        return axios.get(`${API_URL}/courses/category/${categoryId}`);
    }
};

Визуальный стиль приложения основан на принципах материального дизайна с адаптацией под специфику образовательной платформы. Разработана система компонентов, обеспечивающая единообразие интерфейса и простоту поддержки. Все интерактивные элементы снабжены анимациями для улучшения пользовательского опыта:

Главная страница приложения реализована с использованием модульной структуры, что позволяет гибко управлять отображаемым контентом. Внедрена система динамических секций, включающая блоки популярных курсов, рекомендаций на основе предпочтений пользователя и новых поступлений. Каждая секция представляет собой независимый компонент с собственной логикой загрузки и обновления данных.

Реализована система уведомлений, которая информирует пользователей о важных событиях: появлении новых курсов, изменении цен, начале акций или специальных предложений. Уведомления реализованы как отдельный сервис, интегрированный с основным приложением через систему событий. Предусмотрена возможность настройки типов получаемых уведомлений и их частоты.

Для обеспечения высокой производительности приложения внедрен механизм кэширования данных на клиентской стороне. Используется комбинация различных стратегий кэширования: в памяти браузера для часто используемых данных, в локальном хранилище для персональных настроек и в IndexedDB для больших наборов данных. Реализована система инвалидации кэша при обновлении данных:

Особое внимание уделено обработке ошибок и предоставлению информативной обратной связи пользователю. Разработана система перехвата и обработки исключений, которая обеспечивает корректное отображение ошибок в пользовательском интерфейсе. Все сообщения об ошибках локализованы и содержат понятные инструкции по решению возникших проблем.

[ИЗОБРАЖЕНИЕ: Примеры отображения ошибок]


          
